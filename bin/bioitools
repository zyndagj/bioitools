#!/usr/bin/env python

import sys
import bioitools
from bioitools import smoothers
from bioitools import correlations
import argparse

def main():
	if len(sys.argv) < 2:
		usage()
	if sys.argv[1] == "smooth":
		smooth(sys.argv[2:])
	elif sys.argv[1] == "fastaRemove":
		fastaRemove(sys.argv[2:])
	elif sys.argv[1] == "repliCorr":
		repliCorr(sys.argv[2:])
	else:
		usage()

def repliCorr(argList):
	parser = argparse.ArgumentParser(description="Takes in a 2+ bedgraph files, performs a Phi Correlation (http://en.wikipedia.org/wiki/Phi_coefficient), and plots the result.", prog="bioitools repliCorr")
	parser.add_argument('-o',metavar="PNG", help="File to write figure to (Default: %(default)s)", default="figure.png")
	parser.add_argument('-s',metavar="BOOL", help="Save figure (Default: %(default)s)", type=bool, default=True)
	parser.add_argument('-r',metavar="BOOL", help="Render figure (Default: %(default)s)", type=bool, default=False)
	parser.add_argument('bgs',metavar='BG', help="Bedgraph files (At least 2 required)", nargs="+")
	if not argList:
		parser.print_help()
		return
	args = parser.parse_args(argList)
	if len(args.bgs) < 2:
		parser.print_help()
		sys.exit("Please specify at least two bedgraph files\n")
	correlations.makeRepliCorr(args.bgs, args.o, args.s, args.r)

def smooth(argList):
	parser = argparse.ArgumentParser(description="Takes in a bedgraph file, applies either hann or haar smoothing and prints the transformed bedgraph.", prog="bioitools smooth")
	parser.add_argument('method',help='Smoothing method [haar|hann]')
	parser.add_argument('-b',metavar="N",help="Use %(metavar)s bins in hann smoothing (Default %(default)s)", default=20, type=int)
	parser.add_argument('-p',metavar='F',help="Remove lower %(metavar)s percent of variation using after haar wavelet transform (Default %(default)s)", default=80, type=float)
	parser.add_argument('infile',metavar='BEDGRAPH', help="Bedgraph file to be smoothed")
	if not argList:
		parser.print_help()
		return
	args = parser.parse_args(argList)
	if args.method not in ['haar','hann']:
		parser.print_help()
		sys.exit()
	c, s, e, v = bioitools.ParseBedgraph(args.infile)
	chromDict = bioitools._ChromBounds(c)
	if not bioitools.smoothers.isContiguous(s, e, chromDict):
		raise("Bedgraph must be contiguous")
	smoothV = bioitools.smoothers.runSmoother(args.method, args.p, args.b, v, chromDict)
	bioitools.PrintBedgraph(c,s,e,smoothV)

def fastaRemove(argList):
	parser = argparse.ArgumentParser(description="Prints fasta records from a specified fasta that don't match the given regular expression.", prog="bioitools fastaRemove")
	parser.add_argument('regex',metavar="REGEX", help='Regular expression matching fasta records to remove')
	parser.add_argument('infile',metavar="FASTA", help="Fasta file for input")
	if not argList:
		parser.print_help()
		return
	args = parser.parse_args(argList)
	parser
	if len(argList) != 2:
		usage()
	bioitools._checkFile(argList[1],[".fasta",".fa"])
	regex = re.compile(argList[0])
	p = False
	for line in open(argList[1], 'r'):
		if line[0] == '>':
			if regex.match(line):
				p = True
			else:
				p = False
		if p:
			print line[:-1]

def usage():
	print "Available programs"
	print "================\nsmooth\n================"
	smooth(None)
	print "================\nfastaRemove\n================"
	fastaRemove(None)
	print "================\nrepliCorr\n================"
	repliCorr(None)
	sys.exit()

if __name__ == "__main__":
	main()
